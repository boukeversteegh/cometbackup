#!/bin/bash
VERSION="0.6"
if [ -z $1 ] || [ -z $2 ] || [ $1 == "--help" ] || [ $1 == "-h" ]
then
  echo "`basename $0`  version $VERSION"
  echo "<github.com/boukeversteegh/cometbackup>"
  echo ""
  echo "cometbackup is a tool for making (local) differential backups."
  echo "cometcleanup intelligently removes old backups according to a cleanup-schedule."
  echo ""
  echo "Usage: `basename $0` SOURCE TARGET [OPTION]..."
  echo "  or   `basename $0` --help"
  if [[ $1 != "--help" ]] && [[ $1 != "-h" ]]
  then
    exit 1
  fi
fi

if [ $1 == "--help" ] || [ $1 == "-h" ]
then
  echo ""
  echo "Options"
  echo "  --log                Write log-messages to TARGET/comet.log"
  echo "  --test               For debugging. Don't perform backups, shows settings."
  echo "  --format=FORMAT      Override FORMAT for archive copies of backups."
  echo "  --cleanup            Run cometcleanup after backing up."
  echo "  --schedule=SCHEDULE  Set SCHEDULE for cometcleanup. Def: 'schedules/default'."
  echo "  --help, -h           Show this help."
  echo ""
  echo "  SOURCE       Directory to be backed up.  E.g: '/home/admin'.  Don't add a '/'."
  echo "  TARGET       Directory where all backups will be placed. E.g: '/backup/admin'."
  echo "  FORMAT       Format for naming the backup archive copies. Use parameters that"
  echo "               are accepted by 'date +FORMAT' and readable by 'date -d FORMAT'."
  echo "               Default is '%Y-%m-%d %H:%M:%S'."
  echo "  SCHEDULE     Path to schedule file. Default: 'schedules/default'."
  echo "               Refer to 'cometcleanup --help' for more details."
  echo ""
  echo "Details"
  echo "  SOURCE directory is synced to TARGET/current. A differential copy is made to"
  echo "  TARGET/{TIMESTAMP}. You can safely delete any backup - including "
  echo "  TARGET/current - without affecting any of the copies."
  echo ""
  echo "Examples"
  echo "  cometbackup  /home  /backups/home --log"
  echo "  Run twice with time interval. Contents of /backups/home:"
  echo "    2012-10-23 12:03:10/        # first backup"
  echo "    2012-10-23 12:15:43/        # second backup"
  echo "    current/                    # identical to the latest backup"
  echo "    comet.log"
  echo ""
  echo "  cometbackup /home /backups/home --format=\"%Y/%m/%d %H:00\" --cleanup \\"
  echo "    --schedule=~/home.schedule --log"

  exit 0;
fi

PARAMS="$@"
SOURCE=$1
TARGET=$2
FORMAT="%Y-%m-%d %H:%M:%S"
SCHEDULE=`dirname $0`/schedules/default
LOG="false"
LOGFILE="$TARGET/comet.log"
TEST=false
PID="$$"

shift 2
while :
do
  case "$1" in
    --cleanup)
      CLEANUP=true
      shift 1
      ;;
    --schedule=*)
      SCHEDULE=${1:11}
      shift 1
      ;;
    --format=*)
      FORMAT=${1:9}
      shift 1
      ;;
    --log)
        LOG="true"
        shift 1
        ;;
    --test)
       TEST=true
       shift 1
       ;;
    -*)
      echo "Invalid option $1"
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

function filelog {
	[ "$LOG" == "true" ] && echo `date` "[$PID]" "$@" >> $LOGFILE;
}

function log {
	filelog "$@";
	echo "$@";
}

function lockfile_create {
  ERROR="false"
  if [ -n "$(type -P lockfile-create)" ]
  then
    lockfile-create --retry 10 "$1" || ERROR="true"
    lockfile-touch "$1" &
    LOCKPID="$!"
  else
    lockfile -r 10 "$1.lock" || ERROR="true"
  fi

  if [ "$ERROR" == true ]
  then
    log "ERROR: Another cometbackup process is still running: $TARGET. Canceling backup."
    exit 1;
  fi
}

function lockfile_remove {
  if [ -n "$(type -P lockfile-remove)" ]
  then
    kill "${LOCKPID}"
    lockfile-remove "$1"
  else
    rm -f "$1.lock"
  fi
}

if [ "$TEST" == "true" ]
then
  echo "Test-mode: No backups and directories will be made."
  echo "SOURCE=$SOURCE"
  echo "TARGET=$TARGET"
  echo "FORMAT=$FORMAT"
  echo "CLEANUP=$CLEANUP"
  echo "SCHEDULE=$SCHEDULE"
  echo "LOGFILE=$LOGFILE"
  echo "LOG=$LOG"
fi

if [ -z $SOURCE ]
then
  echo "Error. SOURCE not set!"
  exit 1
fi

CURRENT_SUBDIR="current"
CURRENT="$TARGET/$CURRENT_SUBDIR"
ARCHIVE_SUBDIR=`date "+$FORMAT"`
ARCHIVE="$TARGET/$ARCHIVE_SUBDIR"
LOCKFILE_COMETBACKUP="$TARGET/.cometbackup"
LOCKFILE_COMETCLEANUP="$TARGET/.cometcleanup"

if [ "$TEST" == "false" ]
then
	if [ ! -d "$CURRENT" ]
	then
	  mkdir -p "$CURRENT" && TARGETDIR_CREATED="true"
	fi
fi

filelog "Starting CometBackup"
filelog "  cometbackup $PARAMS"
[ ! -z "$TARGETDIR_CREATED" ] && log "Created TARGET directory $TARGET"

CMD_BACKUP="rsync -avzW --delete \"$SOURCE/\" \"$CURRENT\""
CMD_ARCHIVE="cp -lar \"$CURRENT\" \"$ARCHIVE\""

# LOCK
lockfile_create "$LOCKFILE_COMETBACKUP"

log "Creating differential backup $SOURCE --> $CURRENT"
log "  $CMD_BACKUP"

[ "$TEST" == "false" ] && eval $CMD_BACKUP;

log "Creating archive copy $CURRENT_SUBDIR --> $ARCHIVE_SUBDIR"
log "  $CMD_ARCHIVE"

[ "$TEST" == "false" ] && eval $CMD_ARCHIVE;

lockfile_remove "$LOCKFILE_COMETBACKUP"

if [ "$TEST" == "false" ] && [ $CLEANUP ] && [ "$SCHEDULE" ]
then
  export SCHEDULE=$SCHEDULE
  export TARGET=$TARGET
  log "Cleaning up backup directory."
  #ERROR=false && lockfile "$LOCKFILE_COMETCLEANUP" -l 60 -r 10 || ERROR=true
  #if [ "$ERROR" == true ]
  #then
  #  echo "Another cometcleanup process is still running: $TARGET"
  #  exit 1;
  #fi
  `dirname $0`/cometcleanup "$TARGET" "$SCHEDULE"
fi
log "Done."
